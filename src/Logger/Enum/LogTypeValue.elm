-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Logger.Enum.LogTypeValue exposing (LogTypeValue(..), decoder, list, toString)

import Json.Decode as Decode exposing (Decoder)


type LogTypeValue
    = Datetime
    | Float
    | Integer


list : List LogTypeValue
list =
    [ Datetime, Float, Integer ]


decoder : Decoder LogTypeValue
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "DATETIME" ->
                        Decode.succeed Datetime

                    "FLOAT" ->
                        Decode.succeed Float

                    "INTEGER" ->
                        Decode.succeed Integer

                    _ ->
                        Decode.fail ("Invalid LogTypeValue type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : LogTypeValue -> String
toString enum =
    case enum of
        Datetime ->
            "DATETIME"

        Float ->
            "FLOAT"

        Integer ->
            "INTEGER"
