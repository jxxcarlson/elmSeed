-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Logger.Object.Log exposing (LogTypeOptionalArguments, events, id, insertedAt, logType, name, userId)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Logger.Enum.LogTypeValue
import Logger.InputObject
import Logger.Interface
import Logger.Object
import Logger.Scalar
import Logger.ScalarCodecs
import Logger.Union


events : SelectionSet decodesTo Logger.Object.Event -> SelectionSet (List decodesTo) Logger.Object.Log
events object_ =
    Object.selectionForCompositeField "events" [] object_ (identity >> Decode.list)


id : SelectionSet Int Logger.Object.Log
id =
    Object.selectionForField "Int" "id" [] Decode.int


insertedAt : SelectionSet Logger.ScalarCodecs.NaiveDateTime Logger.Object.Log
insertedAt =
    Object.selectionForField "ScalarCodecs.NaiveDateTime" "insertedAt" [] (Logger.ScalarCodecs.codecs |> Logger.Scalar.unwrapCodecs |> .codecNaiveDateTime |> .decoder)


type alias LogTypeOptionalArguments =
    { myArg : OptionalArgument Logger.Enum.LogTypeValue.LogTypeValue }


logType : (LogTypeOptionalArguments -> LogTypeOptionalArguments) -> SelectionSet String Logger.Object.Log
logType fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { myArg = Absent }

        optionalArgs =
            [ Argument.optional "myArg" filledInOptionals.myArg (Encode.enum Logger.Enum.LogTypeValue.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForField "String" "logType" optionalArgs Decode.string


name : SelectionSet String Logger.Object.Log
name =
    Object.selectionForField "String" "name" [] Decode.string


userId : SelectionSet Int Logger.Object.Log
userId =
    Object.selectionForField "Int" "userId" [] Decode.int
